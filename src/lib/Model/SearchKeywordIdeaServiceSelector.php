<?php
/**
 * SearchKeywordIdeaServiceSelector
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! Ads Display Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-display-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-display-api-documents/oauth2-redirect.html\". </div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SearchKeywordIdeaServiceSelector Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;SearchKeywordIdeaServiceSelectorオブジェクトは、サーチターゲティング対象キーワードのリストを表します。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;SearchKeywordIdeaServiceSelector object displays the list of keyword for search targeting.&lt;/div&gt;
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SearchKeywordIdeaServiceSelector implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SearchKeywordIdeaServiceSelector';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'keyword_frequency' => '\OpenAPI\Client\Model\SearchKeywordIdeaServiceKeywordFrequency',
        'keyword_ids' => 'int[]',
        'keyword_recency' => '\OpenAPI\Client\Model\SearchKeywordIdeaServiceKeywordRecency',
        'keywords' => 'string[]',
        'match_type' => '\OpenAPI\Client\Model\SearchKeywordIdeaServiceMatchType',
        'number_results' => 'int',
        'sort_field' => '\OpenAPI\Client\Model\SearchKeywordIdeaServiceSortField',
        'sort_type' => '\OpenAPI\Client\Model\SearchKeywordIdeaServiceSortType',
        'start_index' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'keyword_frequency' => null,
        'keyword_ids' => 'int64',
        'keyword_recency' => null,
        'keywords' => null,
        'match_type' => null,
        'number_results' => 'int32',
        'sort_field' => null,
        'sort_type' => null,
        'start_index' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'keyword_frequency' => 'keywordFrequency',
        'keyword_ids' => 'keywordIds',
        'keyword_recency' => 'keywordRecency',
        'keywords' => 'keywords',
        'match_type' => 'matchType',
        'number_results' => 'numberResults',
        'sort_field' => 'sortField',
        'sort_type' => 'sortType',
        'start_index' => 'startIndex'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'keyword_frequency' => 'setKeywordFrequency',
        'keyword_ids' => 'setKeywordIds',
        'keyword_recency' => 'setKeywordRecency',
        'keywords' => 'setKeywords',
        'match_type' => 'setMatchType',
        'number_results' => 'setNumberResults',
        'sort_field' => 'setSortField',
        'sort_type' => 'setSortType',
        'start_index' => 'setStartIndex'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'keyword_frequency' => 'getKeywordFrequency',
        'keyword_ids' => 'getKeywordIds',
        'keyword_recency' => 'getKeywordRecency',
        'keywords' => 'getKeywords',
        'match_type' => 'getMatchType',
        'number_results' => 'getNumberResults',
        'sort_field' => 'getSortField',
        'sort_type' => 'getSortType',
        'start_index' => 'getStartIndex'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['keyword_frequency'] = isset($data['keyword_frequency']) ? $data['keyword_frequency'] : null;
        $this->container['keyword_ids'] = isset($data['keyword_ids']) ? $data['keyword_ids'] : null;
        $this->container['keyword_recency'] = isset($data['keyword_recency']) ? $data['keyword_recency'] : null;
        $this->container['keywords'] = isset($data['keywords']) ? $data['keywords'] : null;
        $this->container['match_type'] = isset($data['match_type']) ? $data['match_type'] : null;
        $this->container['number_results'] = isset($data['number_results']) ? $data['number_results'] : 1000;
        $this->container['sort_field'] = isset($data['sort_field']) ? $data['sort_field'] : null;
        $this->container['sort_type'] = isset($data['sort_type']) ? $data['sort_type'] : null;
        $this->container['start_index'] = isset($data['start_index']) ? $data['start_index'] : 1;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['number_results']) && ($this->container['number_results'] > 1000)) {
            $invalidProperties[] = "invalid value for 'number_results', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['number_results']) && ($this->container['number_results'] < 1)) {
            $invalidProperties[] = "invalid value for 'number_results', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['start_index']) && ($this->container['start_index'] < 1)) {
            $invalidProperties[] = "invalid value for 'start_index', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets keyword_frequency
     *
     * @return \OpenAPI\Client\Model\SearchKeywordIdeaServiceKeywordFrequency|null
     */
    public function getKeywordFrequency()
    {
        return $this->container['keyword_frequency'];
    }

    /**
     * Sets keyword_frequency
     *
     * @param \OpenAPI\Client\Model\SearchKeywordIdeaServiceKeywordFrequency|null $keyword_frequency keyword_frequency
     *
     * @return $this
     */
    public function setKeywordFrequency($keyword_frequency)
    {
        $this->container['keyword_frequency'] = $keyword_frequency;

        return $this;
    }

    /**
     * Gets keyword_ids
     *
     * @return int[]|null
     */
    public function getKeywordIds()
    {
        return $this->container['keyword_ids'];
    }

    /**
     * Sets keyword_ids
     *
     * @param int[]|null $keyword_ids <div lang=\"ja\"> 検索条件：キーワードID<br> ※キーワード検索用<br> ※キーワード、キーワードIDの同時指定はできません。 </div> <div lang=\"en\">Search condition : Keyword ID.<br> *Keyword for searching.<br> *Can not specify Keyword and Keyword ID at the same time. </div>
     *
     * @return $this
     */
    public function setKeywordIds($keyword_ids)
    {
        $this->container['keyword_ids'] = $keyword_ids;

        return $this;
    }

    /**
     * Gets keyword_recency
     *
     * @return \OpenAPI\Client\Model\SearchKeywordIdeaServiceKeywordRecency|null
     */
    public function getKeywordRecency()
    {
        return $this->container['keyword_recency'];
    }

    /**
     * Sets keyword_recency
     *
     * @param \OpenAPI\Client\Model\SearchKeywordIdeaServiceKeywordRecency|null $keyword_recency keyword_recency
     *
     * @return $this
     */
    public function setKeywordRecency($keyword_recency)
    {
        $this->container['keyword_recency'] = $keyword_recency;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return string[]|null
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param string[]|null $keywords <div lang=\"ja\"> 検索条件：キーワード<br> ※キーワード提案用<br> ※キーワード、キーワードIDの同時指定はできません。 </div> <div lang=\"en\"> Search condition : Keyword.<br> *Keyword for suggesting.<br> *Can not specify Keyword and Keyword ID at the same time. </div>
     *
     * @return $this
     */
    public function setKeywords($keywords)
    {
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets match_type
     *
     * @return \OpenAPI\Client\Model\SearchKeywordIdeaServiceMatchType|null
     */
    public function getMatchType()
    {
        return $this->container['match_type'];
    }

    /**
     * Sets match_type
     *
     * @param \OpenAPI\Client\Model\SearchKeywordIdeaServiceMatchType|null $match_type match_type
     *
     * @return $this
     */
    public function setMatchType($match_type)
    {
        $this->container['match_type'] = $match_type;

        return $this;
    }

    /**
     * Gets number_results
     *
     * @return int|null
     */
    public function getNumberResults()
    {
        return $this->container['number_results'];
    }

    /**
     * Sets number_results
     *
     * @param int|null $number_results <div lang=\"ja\">ページの最大件数です。このフィールドは、1以上を指定する必要があります。</div> <div lang=\"en\">Maximum number of results to return in this page. This field must be greater than or equal to 1. Also see Entity Limits per operation.</div>
     *
     * @return $this
     */
    public function setNumberResults($number_results)
    {

        if (!is_null($number_results) && ($number_results > 1000)) {
            throw new \InvalidArgumentException('invalid value for $number_results when calling SearchKeywordIdeaServiceSelector., must be smaller than or equal to 1000.');
        }
        if (!is_null($number_results) && ($number_results < 1)) {
            throw new \InvalidArgumentException('invalid value for $number_results when calling SearchKeywordIdeaServiceSelector., must be bigger than or equal to 1.');
        }

        $this->container['number_results'] = $number_results;

        return $this;
    }

    /**
     * Gets sort_field
     *
     * @return \OpenAPI\Client\Model\SearchKeywordIdeaServiceSortField|null
     */
    public function getSortField()
    {
        return $this->container['sort_field'];
    }

    /**
     * Sets sort_field
     *
     * @param \OpenAPI\Client\Model\SearchKeywordIdeaServiceSortField|null $sort_field sort_field
     *
     * @return $this
     */
    public function setSortField($sort_field)
    {
        $this->container['sort_field'] = $sort_field;

        return $this;
    }

    /**
     * Gets sort_type
     *
     * @return \OpenAPI\Client\Model\SearchKeywordIdeaServiceSortType|null
     */
    public function getSortType()
    {
        return $this->container['sort_type'];
    }

    /**
     * Sets sort_type
     *
     * @param \OpenAPI\Client\Model\SearchKeywordIdeaServiceSortType|null $sort_type sort_type
     *
     * @return $this
     */
    public function setSortType($sort_type)
    {
        $this->container['sort_type'] = $sort_type;

        return $this;
    }

    /**
     * Gets start_index
     *
     * @return int|null
     */
    public function getStartIndex()
    {
        return $this->container['start_index'];
    }

    /**
     * Sets start_index
     *
     * @param int|null $start_index <div lang=\"ja\">ページの先頭のインデックスです。このフィールドは、1以上を指定する必要があります。</div> <div lang=\"en\">Index of the first result to return in this page. This field must be greater than or equal to 1.</div>
     *
     * @return $this
     */
    public function setStartIndex($start_index)
    {

        if (!is_null($start_index) && ($start_index < 1)) {
            throw new \InvalidArgumentException('invalid value for $start_index when calling SearchKeywordIdeaServiceSelector., must be bigger than or equal to 1.');
        }

        $this->container['start_index'] = $start_index;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


