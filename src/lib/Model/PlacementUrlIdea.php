<?php
/**
 * PlacementUrlIdea
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! Ads Display Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-display-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-display-api-documents/oauth2-redirect.html\". </div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PlacementUrlIdea Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;PlacementUrlIdeaオブジェクトは、プレイスメントUrl情報を保持するオブジェクトです。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;An object that holds the placement Url information.&lt;/div&gt;
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PlacementUrlIdea implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PlacementUrlIdea';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'keyword' => 'string',
        'site_category' => 'string[]',
        'search_url' => 'string',
        'ad_format' => '\OpenAPI\Client\Model\PlacementUrlIdeaServiceAdFormat[]',
        'desktop_reaches' => 'int',
        'desktop_ad_requests' => 'int',
        'smart_phone_reaches' => 'int',
        'smart_phone_ad_requests' => 'int',
        'tablet_reaches' => 'int',
        'tablet_ad_requests' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'keyword' => null,
        'site_category' => null,
        'search_url' => null,
        'ad_format' => null,
        'desktop_reaches' => 'int64',
        'desktop_ad_requests' => 'int64',
        'smart_phone_reaches' => 'int64',
        'smart_phone_ad_requests' => 'int64',
        'tablet_reaches' => 'int64',
        'tablet_ad_requests' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'keyword' => 'keyword',
        'site_category' => 'siteCategory',
        'search_url' => 'searchUrl',
        'ad_format' => 'adFormat',
        'desktop_reaches' => 'desktopReaches',
        'desktop_ad_requests' => 'desktopAdRequests',
        'smart_phone_reaches' => 'smartPhoneReaches',
        'smart_phone_ad_requests' => 'smartPhoneAdRequests',
        'tablet_reaches' => 'tabletReaches',
        'tablet_ad_requests' => 'tabletAdRequests'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'keyword' => 'setKeyword',
        'site_category' => 'setSiteCategory',
        'search_url' => 'setSearchUrl',
        'ad_format' => 'setAdFormat',
        'desktop_reaches' => 'setDesktopReaches',
        'desktop_ad_requests' => 'setDesktopAdRequests',
        'smart_phone_reaches' => 'setSmartPhoneReaches',
        'smart_phone_ad_requests' => 'setSmartPhoneAdRequests',
        'tablet_reaches' => 'setTabletReaches',
        'tablet_ad_requests' => 'setTabletAdRequests'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'keyword' => 'getKeyword',
        'site_category' => 'getSiteCategory',
        'search_url' => 'getSearchUrl',
        'ad_format' => 'getAdFormat',
        'desktop_reaches' => 'getDesktopReaches',
        'desktop_ad_requests' => 'getDesktopAdRequests',
        'smart_phone_reaches' => 'getSmartPhoneReaches',
        'smart_phone_ad_requests' => 'getSmartPhoneAdRequests',
        'tablet_reaches' => 'getTabletReaches',
        'tablet_ad_requests' => 'getTabletAdRequests'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['keyword'] = isset($data['keyword']) ? $data['keyword'] : null;
        $this->container['site_category'] = isset($data['site_category']) ? $data['site_category'] : null;
        $this->container['search_url'] = isset($data['search_url']) ? $data['search_url'] : null;
        $this->container['ad_format'] = isset($data['ad_format']) ? $data['ad_format'] : null;
        $this->container['desktop_reaches'] = isset($data['desktop_reaches']) ? $data['desktop_reaches'] : null;
        $this->container['desktop_ad_requests'] = isset($data['desktop_ad_requests']) ? $data['desktop_ad_requests'] : null;
        $this->container['smart_phone_reaches'] = isset($data['smart_phone_reaches']) ? $data['smart_phone_reaches'] : null;
        $this->container['smart_phone_ad_requests'] = isset($data['smart_phone_ad_requests']) ? $data['smart_phone_ad_requests'] : null;
        $this->container['tablet_reaches'] = isset($data['tablet_reaches']) ? $data['tablet_reaches'] : null;
        $this->container['tablet_ad_requests'] = isset($data['tablet_ad_requests']) ? $data['tablet_ad_requests'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets keyword
     *
     * @return string|null
     */
    public function getKeyword()
    {
        return $this->container['keyword'];
    }

    /**
     * Sets keyword
     *
     * @param string|null $keyword <div lang=\"ja\">検索キーワードです。</div> <div lang=\"en\">Search Keyword</div>
     *
     * @return $this
     */
    public function setKeyword($keyword)
    {
        $this->container['keyword'] = $keyword;

        return $this;
    }

    /**
     * Gets site_category
     *
     * @return string[]|null
     */
    public function getSiteCategory()
    {
        return $this->container['site_category'];
    }

    /**
     * Sets site_category
     *
     * @param string[]|null $site_category <div lang=\"ja\">検索カテゴリです。</div> <div lang=\"en\">Search Category</div>
     *
     * @return $this
     */
    public function setSiteCategory($site_category)
    {
        $this->container['site_category'] = $site_category;

        return $this;
    }

    /**
     * Gets search_url
     *
     * @return string|null
     */
    public function getSearchUrl()
    {
        return $this->container['search_url'];
    }

    /**
     * Sets search_url
     *
     * @param string|null $search_url <div lang=\"ja\"> 取得URLです。<br> 不明なURLの場合　UNKNOWN_URLが入ります。 </div> <div lang=\"en\">URL</div>
     *
     * @return $this
     */
    public function setSearchUrl($search_url)
    {
        $this->container['search_url'] = $search_url;

        return $this;
    }

    /**
     * Gets ad_format
     *
     * @return \OpenAPI\Client\Model\PlacementUrlIdeaServiceAdFormat[]|null
     */
    public function getAdFormat()
    {
        return $this->container['ad_format'];
    }

    /**
     * Sets ad_format
     *
     * @param \OpenAPI\Client\Model\PlacementUrlIdeaServiceAdFormat[]|null $ad_format ad_format
     *
     * @return $this
     */
    public function setAdFormat($ad_format)
    {
        $this->container['ad_format'] = $ad_format;

        return $this;
    }

    /**
     * Gets desktop_reaches
     *
     * @return int|null
     */
    public function getDesktopReaches()
    {
        return $this->container['desktop_reaches'];
    }

    /**
     * Sets desktop_reaches
     *
     * @param int|null $desktop_reaches <div lang=\"ja\"> PC でのリーチ数です。<br> ・1000未満の時は0が取得されます。 </div> <div lang=\"en\">Reach Number of PC(1000 In the case of 0)</div>
     *
     * @return $this
     */
    public function setDesktopReaches($desktop_reaches)
    {
        $this->container['desktop_reaches'] = $desktop_reaches;

        return $this;
    }

    /**
     * Gets desktop_ad_requests
     *
     * @return int|null
     */
    public function getDesktopAdRequests()
    {
        return $this->container['desktop_ad_requests'];
    }

    /**
     * Sets desktop_ad_requests
     *
     * @param int|null $desktop_ad_requests <div lang=\"ja\"> PC でのADリクエスト数です。<br> ・1000未満の時は0が取得されます。 </div> <div lang=\"en\">AD Number of PC(1000 In the case of 0)</div>
     *
     * @return $this
     */
    public function setDesktopAdRequests($desktop_ad_requests)
    {
        $this->container['desktop_ad_requests'] = $desktop_ad_requests;

        return $this;
    }

    /**
     * Gets smart_phone_reaches
     *
     * @return int|null
     */
    public function getSmartPhoneReaches()
    {
        return $this->container['smart_phone_reaches'];
    }

    /**
     * Sets smart_phone_reaches
     *
     * @param int|null $smart_phone_reaches <div lang=\"ja\"> SmartPhone でのリーチ数です。<br> ・1000未満の時は0が取得されます。 </div> <div lang=\"en\">Reach Number of SmartPhone (1000 In the case of 0)</div>
     *
     * @return $this
     */
    public function setSmartPhoneReaches($smart_phone_reaches)
    {
        $this->container['smart_phone_reaches'] = $smart_phone_reaches;

        return $this;
    }

    /**
     * Gets smart_phone_ad_requests
     *
     * @return int|null
     */
    public function getSmartPhoneAdRequests()
    {
        return $this->container['smart_phone_ad_requests'];
    }

    /**
     * Sets smart_phone_ad_requests
     *
     * @param int|null $smart_phone_ad_requests <div lang=\"ja\"> SmartPhone でのADリクエスト数です。<br> ・1000未満の時は0が取得されます。 </div> <div lang=\"en\">AD Number of SmartPhone(1000 In the case of 0)</div>
     *
     * @return $this
     */
    public function setSmartPhoneAdRequests($smart_phone_ad_requests)
    {
        $this->container['smart_phone_ad_requests'] = $smart_phone_ad_requests;

        return $this;
    }

    /**
     * Gets tablet_reaches
     *
     * @return int|null
     */
    public function getTabletReaches()
    {
        return $this->container['tablet_reaches'];
    }

    /**
     * Sets tablet_reaches
     *
     * @param int|null $tablet_reaches <div lang=\"ja\"> Tablet でのリーチ数です。<br> ・1000未満の時は0が取得されます。 </div> <div lang=\"en\">Tablet(1000 In the case of 0)</div>
     *
     * @return $this
     */
    public function setTabletReaches($tablet_reaches)
    {
        $this->container['tablet_reaches'] = $tablet_reaches;

        return $this;
    }

    /**
     * Gets tablet_ad_requests
     *
     * @return int|null
     */
    public function getTabletAdRequests()
    {
        return $this->container['tablet_ad_requests'];
    }

    /**
     * Sets tablet_ad_requests
     *
     * @param int|null $tablet_ad_requests <div lang=\"ja\"> TabletでのADリクエスト数です。<br> ・1000未満の時は0が取得されます。 </div> <div lang=\"en\">AD Number of Tablet (1000 In the case of 0)</div>
     *
     * @return $this
     */
    public function setTabletAdRequests($tablet_ad_requests)
    {
        $this->container['tablet_ad_requests'] = $tablet_ad_requests;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


