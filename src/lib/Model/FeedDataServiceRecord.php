<?php
/**
 * FeedDataServiceRecord
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! Ads Display Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-display-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-display-api-documents/oauth2-redirect.html\". </div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FeedDataServiceRecord Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;FeedDataServiceRecordオブジェクトは、アップロードした商品情報(ファイル形式)の状態を保持する。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;FeedDataServiceRecord object retains status of uploaded item list(file format).&lt;/div&gt;
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FeedDataServiceRecord implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FeedDataServiceRecord';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'int',
        'complete_date' => 'string',
        'error_count' => 'int',
        'error_rate' => 'double',
        'feed_id' => 'int',
        'file_upload_src' => '\OpenAPI\Client\Model\FeedDataServiceFileUploadSrc',
        'file_upload_status' => '\OpenAPI\Client\Model\FeedDataServiceFileUploadStatus',
        'is_debug' => 'bool',
        'item_list_upload_id' => 'int',
        'item_list_upload_type' => '\OpenAPI\Client\Model\FeedDataServiceItemListUploadType',
        'upload_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'account_id' => 'int64',
        'complete_date' => null,
        'error_count' => 'int64',
        'error_rate' => 'double',
        'feed_id' => 'int64',
        'file_upload_src' => null,
        'file_upload_status' => null,
        'is_debug' => null,
        'item_list_upload_id' => 'int64',
        'item_list_upload_type' => null,
        'upload_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'complete_date' => 'completeDate',
        'error_count' => 'errorCount',
        'error_rate' => 'errorRate',
        'feed_id' => 'feedId',
        'file_upload_src' => 'fileUploadSrc',
        'file_upload_status' => 'fileUploadStatus',
        'is_debug' => 'isDebug',
        'item_list_upload_id' => 'itemListUploadId',
        'item_list_upload_type' => 'itemListUploadType',
        'upload_date' => 'uploadDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'complete_date' => 'setCompleteDate',
        'error_count' => 'setErrorCount',
        'error_rate' => 'setErrorRate',
        'feed_id' => 'setFeedId',
        'file_upload_src' => 'setFileUploadSrc',
        'file_upload_status' => 'setFileUploadStatus',
        'is_debug' => 'setIsDebug',
        'item_list_upload_id' => 'setItemListUploadId',
        'item_list_upload_type' => 'setItemListUploadType',
        'upload_date' => 'setUploadDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'complete_date' => 'getCompleteDate',
        'error_count' => 'getErrorCount',
        'error_rate' => 'getErrorRate',
        'feed_id' => 'getFeedId',
        'file_upload_src' => 'getFileUploadSrc',
        'file_upload_status' => 'getFileUploadStatus',
        'is_debug' => 'getIsDebug',
        'item_list_upload_id' => 'getItemListUploadId',
        'item_list_upload_type' => 'getItemListUploadType',
        'upload_date' => 'getUploadDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['complete_date'] = isset($data['complete_date']) ? $data['complete_date'] : null;
        $this->container['error_count'] = isset($data['error_count']) ? $data['error_count'] : null;
        $this->container['error_rate'] = isset($data['error_rate']) ? $data['error_rate'] : null;
        $this->container['feed_id'] = isset($data['feed_id']) ? $data['feed_id'] : null;
        $this->container['file_upload_src'] = isset($data['file_upload_src']) ? $data['file_upload_src'] : null;
        $this->container['file_upload_status'] = isset($data['file_upload_status']) ? $data['file_upload_status'] : null;
        $this->container['is_debug'] = isset($data['is_debug']) ? $data['is_debug'] : null;
        $this->container['item_list_upload_id'] = isset($data['item_list_upload_id']) ? $data['item_list_upload_id'] : null;
        $this->container['item_list_upload_type'] = isset($data['item_list_upload_type']) ? $data['item_list_upload_type'] : null;
        $this->container['upload_date'] = isset($data['upload_date']) ? $data['upload_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id <div lang=\"ja\">アカウントID</div> <div lang=\"en\">Account ID.</div>
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets complete_date
     *
     * @return string|null
     */
    public function getCompleteDate()
    {
        return $this->container['complete_date'];
    }

    /**
     * Sets complete_date
     *
     * @param string|null $complete_date <div lang=\"ja\">取り込み完了日(yyyyMMdd)</div> <div lang=\"en\"> Complete date.<br> Format: yyyyMMdd </div>
     *
     * @return $this
     */
    public function setCompleteDate($complete_date)
    {
        $this->container['complete_date'] = $complete_date;

        return $this;
    }

    /**
     * Gets error_count
     *
     * @return int|null
     */
    public function getErrorCount()
    {
        return $this->container['error_count'];
    }

    /**
     * Sets error_count
     *
     * @param int|null $error_count <div lang=\"ja\">不備がある商品情報の件数</div> <div lang=\"en\">Number of item list with error.</div>
     *
     * @return $this
     */
    public function setErrorCount($error_count)
    {
        $this->container['error_count'] = $error_count;

        return $this;
    }

    /**
     * Gets error_rate
     *
     * @return double|null
     */
    public function getErrorRate()
    {
        return $this->container['error_rate'];
    }

    /**
     * Sets error_rate
     *
     * @param double|null $error_rate <div lang=\"ja\">エラー率</div> <div lang=\"en\">Error rate.</div>
     *
     * @return $this
     */
    public function setErrorRate($error_rate)
    {
        $this->container['error_rate'] = $error_rate;

        return $this;
    }

    /**
     * Gets feed_id
     *
     * @return int|null
     */
    public function getFeedId()
    {
        return $this->container['feed_id'];
    }

    /**
     * Sets feed_id
     *
     * @param int|null $feed_id <div lang=\"ja\">Feedを識別するId</div> <div lang=\"en\">Feed ID.</div>
     *
     * @return $this
     */
    public function setFeedId($feed_id)
    {
        $this->container['feed_id'] = $feed_id;

        return $this;
    }

    /**
     * Gets file_upload_src
     *
     * @return \OpenAPI\Client\Model\FeedDataServiceFileUploadSrc|null
     */
    public function getFileUploadSrc()
    {
        return $this->container['file_upload_src'];
    }

    /**
     * Sets file_upload_src
     *
     * @param \OpenAPI\Client\Model\FeedDataServiceFileUploadSrc|null $file_upload_src file_upload_src
     *
     * @return $this
     */
    public function setFileUploadSrc($file_upload_src)
    {
        $this->container['file_upload_src'] = $file_upload_src;

        return $this;
    }

    /**
     * Gets file_upload_status
     *
     * @return \OpenAPI\Client\Model\FeedDataServiceFileUploadStatus|null
     */
    public function getFileUploadStatus()
    {
        return $this->container['file_upload_status'];
    }

    /**
     * Sets file_upload_status
     *
     * @param \OpenAPI\Client\Model\FeedDataServiceFileUploadStatus|null $file_upload_status file_upload_status
     *
     * @return $this
     */
    public function setFileUploadStatus($file_upload_status)
    {
        $this->container['file_upload_status'] = $file_upload_status;

        return $this;
    }

    /**
     * Gets is_debug
     *
     * @return bool|null
     */
    public function getIsDebug()
    {
        return $this->container['is_debug'];
    }

    /**
     * Sets is_debug
     *
     * @param bool|null $is_debug <div lang=\"ja\">trueはデバッグモードでの実行を意味します。</div> <div lang=\"en\">&#34;true&#34; means to run in debug mode.</div>
     *
     * @return $this
     */
    public function setIsDebug($is_debug)
    {
        $this->container['is_debug'] = $is_debug;

        return $this;
    }

    /**
     * Gets item_list_upload_id
     *
     * @return int|null
     */
    public function getItemListUploadId()
    {
        return $this->container['item_list_upload_id'];
    }

    /**
     * Sets item_list_upload_id
     *
     * @param int|null $item_list_upload_id <div lang=\"ja\">アップロードした商品情報を識別するID</div> <div lang=\"en\">Uploaded item list ID.</div>
     *
     * @return $this
     */
    public function setItemListUploadId($item_list_upload_id)
    {
        $this->container['item_list_upload_id'] = $item_list_upload_id;

        return $this;
    }

    /**
     * Gets item_list_upload_type
     *
     * @return \OpenAPI\Client\Model\FeedDataServiceItemListUploadType|null
     */
    public function getItemListUploadType()
    {
        return $this->container['item_list_upload_type'];
    }

    /**
     * Sets item_list_upload_type
     *
     * @param \OpenAPI\Client\Model\FeedDataServiceItemListUploadType|null $item_list_upload_type item_list_upload_type
     *
     * @return $this
     */
    public function setItemListUploadType($item_list_upload_type)
    {
        $this->container['item_list_upload_type'] = $item_list_upload_type;

        return $this;
    }

    /**
     * Gets upload_date
     *
     * @return string|null
     */
    public function getUploadDate()
    {
        return $this->container['upload_date'];
    }

    /**
     * Sets upload_date
     *
     * @param string|null $upload_date <div lang=\"ja\">アップロード日(yyyyMMdd)</div> <div lang=\"en\"> Upload date.<br> Format: yyyyMMdd </div>
     *
     * @return $this
     */
    public function setUploadDate($upload_date)
    {
        $this->container['upload_date'] = $upload_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


