<?php
/**
 * DictionaryServiceMediaAdFormat
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! Ads Display Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-display-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-display-api-documents/oauth2-redirect.html\". </div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DictionaryServiceMediaAdFormat Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;DictionaryServiceMediaAdFormatオブジェクトは、メディアフォーマットの情報を保持します。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;DictionaryServiceMediaAdFormat object contains the information of media format.&lt;/div&gt;
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DictionaryServiceMediaAdFormat implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DictionaryServiceMediaAdFormat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ad_format' => 'string',
        'aspect' => 'bool',
        'aspect_height' => 'int',
        'aspect_ratio' => 'string',
        'aspect_width' => 'int',
        'campaign_banner' => 'bool',
        'height' => 'int',
        'logo' => 'bool',
        'max_height' => 'int',
        'max_width' => 'int',
        'size' => 'int',
        'size_to' => 'int',
        'static_image' => 'bool',
        'thumbnail' => 'bool',
        'transparent' => 'bool',
        'width' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'ad_format' => null,
        'aspect' => null,
        'aspect_height' => 'int64',
        'aspect_ratio' => null,
        'aspect_width' => 'int64',
        'campaign_banner' => null,
        'height' => 'int64',
        'logo' => null,
        'max_height' => 'int64',
        'max_width' => 'int64',
        'size' => 'int64',
        'size_to' => 'int64',
        'static_image' => null,
        'thumbnail' => null,
        'transparent' => null,
        'width' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ad_format' => 'adFormat',
        'aspect' => 'aspect',
        'aspect_height' => 'aspectHeight',
        'aspect_ratio' => 'aspectRatio',
        'aspect_width' => 'aspectWidth',
        'campaign_banner' => 'campaignBanner',
        'height' => 'height',
        'logo' => 'logo',
        'max_height' => 'maxHeight',
        'max_width' => 'maxWidth',
        'size' => 'size',
        'size_to' => 'sizeTo',
        'static_image' => 'staticImage',
        'thumbnail' => 'thumbnail',
        'transparent' => 'transparent',
        'width' => 'width'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ad_format' => 'setAdFormat',
        'aspect' => 'setAspect',
        'aspect_height' => 'setAspectHeight',
        'aspect_ratio' => 'setAspectRatio',
        'aspect_width' => 'setAspectWidth',
        'campaign_banner' => 'setCampaignBanner',
        'height' => 'setHeight',
        'logo' => 'setLogo',
        'max_height' => 'setMaxHeight',
        'max_width' => 'setMaxWidth',
        'size' => 'setSize',
        'size_to' => 'setSizeTo',
        'static_image' => 'setStaticImage',
        'thumbnail' => 'setThumbnail',
        'transparent' => 'setTransparent',
        'width' => 'setWidth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ad_format' => 'getAdFormat',
        'aspect' => 'getAspect',
        'aspect_height' => 'getAspectHeight',
        'aspect_ratio' => 'getAspectRatio',
        'aspect_width' => 'getAspectWidth',
        'campaign_banner' => 'getCampaignBanner',
        'height' => 'getHeight',
        'logo' => 'getLogo',
        'max_height' => 'getMaxHeight',
        'max_width' => 'getMaxWidth',
        'size' => 'getSize',
        'size_to' => 'getSizeTo',
        'static_image' => 'getStaticImage',
        'thumbnail' => 'getThumbnail',
        'transparent' => 'getTransparent',
        'width' => 'getWidth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ad_format'] = isset($data['ad_format']) ? $data['ad_format'] : null;
        $this->container['aspect'] = isset($data['aspect']) ? $data['aspect'] : null;
        $this->container['aspect_height'] = isset($data['aspect_height']) ? $data['aspect_height'] : null;
        $this->container['aspect_ratio'] = isset($data['aspect_ratio']) ? $data['aspect_ratio'] : null;
        $this->container['aspect_width'] = isset($data['aspect_width']) ? $data['aspect_width'] : null;
        $this->container['campaign_banner'] = isset($data['campaign_banner']) ? $data['campaign_banner'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['max_height'] = isset($data['max_height']) ? $data['max_height'] : null;
        $this->container['max_width'] = isset($data['max_width']) ? $data['max_width'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['size_to'] = isset($data['size_to']) ? $data['size_to'] : null;
        $this->container['static_image'] = isset($data['static_image']) ? $data['static_image'] : null;
        $this->container['thumbnail'] = isset($data['thumbnail']) ? $data['thumbnail'] : null;
        $this->container['transparent'] = isset($data['transparent']) ? $data['transparent'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ad_format
     *
     * @return string|null
     */
    public function getAdFormat()
    {
        return $this->container['ad_format'];
    }

    /**
     * Sets ad_format
     *
     * @param string|null $ad_format <div lang=\"ja\">ディスプレイ（画像）広告のフォーマットです。</div> <div lang=\"en\">Format of display (image) ads</div>
     *
     * @return $this
     */
    public function setAdFormat($ad_format)
    {
        $this->container['ad_format'] = $ad_format;

        return $this;
    }

    /**
     * Gets aspect
     *
     * @return bool|null
     */
    public function getAspect()
    {
        return $this->container['aspect'];
    }

    /**
     * Sets aspect
     *
     * @param bool|null $aspect <div lang=\"ja\">アスペクト比対応かどうかを示します。</div> <div lang=\"en\">This field indicates whether the aspect ratio is supported.</div>
     *
     * @return $this
     */
    public function setAspect($aspect)
    {
        $this->container['aspect'] = $aspect;

        return $this;
    }

    /**
     * Gets aspect_height
     *
     * @return int|null
     */
    public function getAspectHeight()
    {
        return $this->container['aspect_height'];
    }

    /**
     * Sets aspect_height
     *
     * @param int|null $aspect_height <div lang=\"ja\">画像アスペクト比：高さ [ratio]です。</div> <div lang=\"en\">Image aspect ratio: height [ratio]</div>
     *
     * @return $this
     */
    public function setAspectHeight($aspect_height)
    {
        $this->container['aspect_height'] = $aspect_height;

        return $this;
    }

    /**
     * Gets aspect_ratio
     *
     * @return string|null
     */
    public function getAspectRatio()
    {
        return $this->container['aspect_ratio'];
    }

    /**
     * Sets aspect_ratio
     *
     * @param string|null $aspect_ratio <div lang=\"ja\">アスペクト比です。</div> <div lang=\"en\">Aspect ratio.</div>
     *
     * @return $this
     */
    public function setAspectRatio($aspect_ratio)
    {
        $this->container['aspect_ratio'] = $aspect_ratio;

        return $this;
    }

    /**
     * Gets aspect_width
     *
     * @return int|null
     */
    public function getAspectWidth()
    {
        return $this->container['aspect_width'];
    }

    /**
     * Sets aspect_width
     *
     * @param int|null $aspect_width <div lang=\"ja\">画像アスペクト比：幅 [ratio]です。</div> <div lang=\"en\">Image aspect ratio: width [ratio]</div>
     *
     * @return $this
     */
    public function setAspectWidth($aspect_width)
    {
        $this->container['aspect_width'] = $aspect_width;

        return $this;
    }

    /**
     * Gets campaign_banner
     *
     * @return bool|null
     */
    public function getCampaignBanner()
    {
        return $this->container['campaign_banner'];
    }

    /**
     * Sets campaign_banner
     *
     * @param bool|null $campaign_banner <div lang=\"ja\">キャンペーンバナー画像である/キャンペーンバナー画像ではないことを示します。</div> <div lang=\"en\">This field indicates whether it is a campaign banner image or not.</div>
     *
     * @return $this
     */
    public function setCampaignBanner($campaign_banner)
    {
        $this->container['campaign_banner'] = $campaign_banner;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height <div lang=\"ja\">最小画像サイズ：高さ [pixel]です。</div> <div lang=\"en\">Minimum image size: height [pixel]</div>
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return bool|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param bool|null $logo <div lang=\"ja\">ロゴ画像である/ロゴ画像ではないことを示します。</div> <div lang=\"en\">This field indicates whether it is a logo image or not.</div>
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets max_height
     *
     * @return int|null
     */
    public function getMaxHeight()
    {
        return $this->container['max_height'];
    }

    /**
     * Sets max_height
     *
     * @param int|null $max_height <div lang=\"ja\">サイズ上限：高さ [pixel]です。</div> <div lang=\"en\">Size limit: height [pixel]</div>
     *
     * @return $this
     */
    public function setMaxHeight($max_height)
    {
        $this->container['max_height'] = $max_height;

        return $this;
    }

    /**
     * Gets max_width
     *
     * @return int|null
     */
    public function getMaxWidth()
    {
        return $this->container['max_width'];
    }

    /**
     * Sets max_width
     *
     * @param int|null $max_width <div lang=\"ja\">サイズ上限：幅 [pixel]です。</div> <div lang=\"en\">Size limit: width [pixel]</div>
     *
     * @return $this
     */
    public function setMaxWidth($max_width)
    {
        $this->container['max_width'] = $max_width;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size <div lang=\"ja\">画像の最大容量：[byte]です。</div> <div lang=\"en\">Maximum image capacity: [byte]</div>
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets size_to
     *
     * @return int|null
     */
    public function getSizeTo()
    {
        return $this->container['size_to'];
    }

    /**
     * Sets size_to
     *
     * @param int|null $size_to <div lang=\"ja\">画像圧縮後の容量：[byte]です。</div> <div lang=\"en\">Image compression capacity: [byte]</div>
     *
     * @return $this
     */
    public function setSizeTo($size_to)
    {
        $this->container['size_to'] = $size_to;

        return $this;
    }

    /**
     * Gets static_image
     *
     * @return bool|null
     */
    public function getStaticImage()
    {
        return $this->container['static_image'];
    }

    /**
     * Sets static_image
     *
     * @param bool|null $static_image <div lang=\"ja\">静止画用の画像かどうかを示します。</div> <div lang=\"en\">This field indicates whether it is a static image.</div>
     *
     * @return $this
     */
    public function setStaticImage($static_image)
    {
        $this->container['static_image'] = $static_image;

        return $this;
    }

    /**
     * Gets thumbnail
     *
     * @return bool|null
     */
    public function getThumbnail()
    {
        return $this->container['thumbnail'];
    }

    /**
     * Sets thumbnail
     *
     * @param bool|null $thumbnail <div lang=\"ja\">サムネイル画像である/サムネイル画像ではないことを示します。</div> <div lang=\"en\">This field indicates whether it is a thumbnail image image or not.</div>
     *
     * @return $this
     */
    public function setThumbnail($thumbnail)
    {
        $this->container['thumbnail'] = $thumbnail;

        return $this;
    }

    /**
     * Gets transparent
     *
     * @return bool|null
     */
    public function getTransparent()
    {
        return $this->container['transparent'];
    }

    /**
     * Sets transparent
     *
     * @param bool|null $transparent <div lang=\"ja\">透過画像の許可/不許可を示します。</div> <div lang=\"en\">This field indicates whether transparent image is permitted.</div>
     *
     * @return $this
     */
    public function setTransparent($transparent)
    {
        $this->container['transparent'] = $transparent;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width <div lang=\"ja\">最小画像サイズ：幅 [pixel]です。</div> <div lang=\"en\">Minimum image size: width [pixel]</div>
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


